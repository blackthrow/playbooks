---
- hosts: all
  gather_facts: no
  tasks:
    - name: Bootstrap the system
      raw: pacman-key --init && pacman-key --populate archlinuxarm && pacman -Sy && pacman --noconfirm --needed -S python
      become: true

- hosts: all
  vars_files:
    - vars/main.yaml
    - vars/users.yaml
  become: true
  tasks:
    - name: Install dependencies
      pacman:
        name: [ inetutils, parted ]
        state: present
        update_cache: yes

    - name: Resize root partition
      shell: parted ---pretend-input-tty {{ item.device | regex_replace("\d$", "") }} resizepart 2 Yes 100% && resize2fs {{ item.device }}
      with_items: "{{ ansible_mounts }}"
      when: item.mount == "/"

    - import_role:
        name: pip

    - name: Install Python dependencies
      pip:
        name: [ docker ]

    - name: Change hostname
      hostname:
        name: "{{ hostname }}"

    - import_role:
        name: docker

    - import_role:
        name: tor

    - import_role:
        name: dosh

    - name: Create system users
      user:
        name: "{{ item.key }}"
        generate_ssh_key: yes
        password: "{{ item.value.password | password_hash('sha512', password_salt) }}"
        update_password: always
        create_home: yes
        home: "{{ item.value.home | default('/home/' + item.key) }}"
        groups: "{{ item.value.groups | default([]) }}"
        shell: "{{ item.value.shell | default('/bin/bash') }}"
        state: present
      with_dict: "{{ users }}"
      when: item.value.system_user | default(true)

    - name: Authorize SSH keys
      authorized_key:
        user: "{{ item.key }}"
        key: "{{ lookup('file', (item.value.home | default('/home/' + item.key)) + '/.ssh/id_rsa.pub') }}"
        state: present
      with_dict: "{{ users }}"
      when: item.value.system_user | default(true)

    # Reconfigure OpenSSH server only after keys have been generated for system
    # users. Otherwise we might lock ourselves out.
    - import_role:
        name: opensshd

    - name: Pull Docker images
      docker_image:
        name: "{{ item.value.image }}"
      with_dict: "{{ users }}"
      when: item.value.image is defined and item.value.image != ""

    - name: Disable default user account {{ default_user }}
      user:
        name: "{{ default_user }}"
        password_lock: yes
        shell: /bin/nologin

