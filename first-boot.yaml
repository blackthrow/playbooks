---
#
# Play: Bootstrap pacman and python so we can run Ansible.
#
- hosts: all
  gather_facts: no
  tasks:
    - name: Bootstrap the system
      raw: pacman-key --init && pacman-key --populate archlinuxarm && pacman -Sy && pacman --noconfirm --needed -S python
      become: true

#
# Play: Create system users and generate SSH keys.
#
- import_playbook: setup-users.yaml

#
# Play: Configure other parts of the system, install software.
#
- hosts: all
  vars_files:
    - vars/main.yaml
    - vars/users.yaml
    - vars/onions.yaml
    - vars/wifi.yaml
  become: true
  tasks:
    - name: Install dependencies
      pacman:
        name: [ inetutils, parted ]
        state: present
        update_cache: yes

    - name: Resize root partition
      shell: parted ---pretend-input-tty {{ item.device | regex_replace("p?\d$", "") }} resizepart 2 Yes 100% && resize2fs {{ item.device }}
      with_items: "{{ ansible_mounts }}"
      when: item.mount == "/"

    - import_role:
        name: pip

    - import_role:
        name: wpa_supplicant
        tasks_from: install

    - include_role:
        name: wpa_supplicant
      vars:
        iface_name: "{{ item.key }}"
        iface: "{{ item.value }}"
      with_dict: "{{ wifi }}"

    - import_role:
        name: tor

    - import_role:
        name: opensshd

    - name: Disable default user account {{ default_user }}
      user:
        name: "{{ default_user }}"
        password_lock: yes
        shell: /bin/nologin

    - name: Change hostname
      hostname:
        name: "{{ hostname }}"

#
# Play: Fetch various resources from remote hosts and store them locally.
#
- hosts: all
  vars_files:
    - vars/main.yaml
    - vars/users.yaml
    - vars/onions.yaml
  become: true
  tasks:
    - name: Fetch SSH private keys
      fetch:
        src: "{{ (item.value.home | default('/home/' + item.key)) + '/.ssh/id_rsa' }}"
        dest: "{{ resource_store }}"
        fail_on_missing: no
      with_dict: "{{ users }}"
      when: item.value.system_user | default(true)

    - name: Fetch onion addresses
      fetch:
        src: "/var/lib/tor/{{ item.key }}/hostname"
        dest: "{{ resource_store }}"
        fail_on_missing: no
      with_dict: "{{ onions }}"

